import random

class TreapNode:
    def __init__(self, key):
        self.key = key
        self.priority = random.random()
        self.left = None
        self.right = None

class Treap:
    def __init__(self):
        self.root = None
    def _rotate_right(self, y):
        x = y.left
        y.left = x.right
        x.right = y
        return x
    def _rotate_left(self, x):
        y = x.right
        x.right = y.left
        y.left = x
        return y
    def _insert(self, node, key):
        if node is None:
            return TreapNode(key)
        if key < node.key:
            node.left = self._insert(node.left, key)
            if node.left.priority < node.priority:
                node = self._rotate_right(node)
        elif key > node.key:
            node.right = self._insert(node.right, key)
            if node.right.priority < node.priority:
                node = self._rotate_left(node)
        return node
    def insert(self, key):
        self.root = self._insert(self.root, key)
    def search(self, key):
        current = self.root
        visited = 0
        while current:
            visited += 1
            if key == current.key:
                return True, visited
            elif key < current.key:
                current = current.left
            else:
                current = current.right
        return False, visited

class SkipListNode:
    def __init__(self, key, level):
        self.key = key
        self.forward = [None] * (level + 1)

class SkipList:
    def __init__(self, max_level=16, p=0.5):
        self.max_level = max_level
        self.p = p
        self.header = SkipListNode(-1, max_level)
        self.level = 0
    def random_level(self):
        lvl = 0
        while random.random() < self.p and lvl < self.max_level:
            lvl += 1
        return lvl
    def insert(self, key):
        update = [None] * (self.max_level + 1)
        current = self.header
        for i in reversed(range(self.level + 1)):
            while current.forward[i] and current.forward[i].key < key:
                current = current.forward[i]
            update[i] = current
        current = current.forward[0]
        if current is None or current.key != key:
            lvl = self.random_level()
            if lvl > self.level:
                for i in range(self.level + 1, lvl + 1):
                    update[i] = self.header
                self.level = lvl
            new_node = SkipListNode(key, lvl)
            for i in range(lvl + 1):
                new_node.forward[i] = update[i].forward[i]
                update[i].forward[i] = new_node
    def search(self, key):
        current = self.header
        visited = 0
        for i in reversed(range(self.level + 1)):
            while current.forward[i] and current.forward[i].key < key:
                current = current.forward[i]
                visited += 1
        current = current.forward[0]
        visited += 1
        if current and current.key == key:
            return True, visited
        return False, visited

sizes = [5_000_000, 10_000_000, 20_000_000]

for n in sizes:
    print(f"\nRunning test for n = {n:,}")
    keys = random.sample(range(n * 10), n)
    treap = Treap()
    skiplist = SkipList()
    for key in keys:
        treap.insert(key)
        skiplist.insert(key)
    search_keys = random.choices(keys, k=500_000) + random.choices(range(n * 10, n * 20), k=500_000)
    random.shuffle(search_keys)
    treap_total = 0
    skiplist_total = 0
    for key in search_keys:
        _, visits = treap.search(key)
        treap_total += visits
        _, visits = skiplist.search(key)
        skiplist_total += visits

    print(f"Treap дамжин өнгөрсөн Node тоо:     {treap_total / 1_000_000:.2f}")
    print(f"Skip List дамжин өнгөрсөн Node тоо: {skiplist_total / 1_000_000:.2f}")
